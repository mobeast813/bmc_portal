{"version":3,"file":"static/js/82.daadf39d.chunk.js","mappings":"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","sources":["views/admin/userManagement/UserManagementList.js","components/text/InputTextTemplete.js","views/admin/userManagement/UserManagementMain.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n\tCFormCheck,\n\tCTable,\n\tCTableBody,\n\tCTableDataCell,\n\tCTableHead,\n\tCTableHeaderCell,\n\tCTableRow,\n} from \"@coreui/react\";\nimport { useDispatch } from \"react-redux\";\n\n\nconst UserManagementList = ({\n\tlist,\n\tselectId,\n\tunselectId,\n\tselectAll,\n\tunselectAll,\n\tresetCheckbox,\n}) => {\n\tconst dispatch = useDispatch();\n\tconst navigate = useNavigate();\n\n\tconst [items, setItems] = useState();\n\tconst [headCheckStates, setHeadCheckStates] = useState(false);\n\tconst [checkboxStates, setCheckboxStates] = useState({});\n\tconst [selectedItem, setSelectedItem] = useState();\n\n\tconst handleCheckboxChange = (id, isChecked) => {\n\t\tsetCheckboxStates((prevState) => ({\n\t\t\t...prevState,\n\t\t\t[id]: isChecked,\n\t\t}));\n\t};\n\n\tuseEffect(() => {\n\t\tsetHeadCheckStates(false)\n\t\tif (items) {\n\t\t\titems.forEach((item) => {\n\t\t\t\tcheckboxStates[item.userId] = false;\n\t\t\t});\n\t\t}\n\t\tunselectAll();\n\t}, [resetCheckbox])\n\n\tconst showDetailPopup = (userId) => {\n\t\tsetSelectedItem(userId)\n\t}\n\n\n\tuseEffect(() => {\n\t\t// checkboxStates가 초기 상태({})인 경우 실행하지 않음\n\t\tif (Object.keys(checkboxStates).length === 0) return;\n\n\t\t// 모든 id가 true인지 확인\n\t\tconst allChecked = Object.values(checkboxStates).every((value) => value);\n\n\t\tif (allChecked) {\n\t\t\t// 모든 id가 true일 때 실행할 코드\n\t\t\tsetHeadCheckStates(true);\n\t\t} else {\n\t\t\tsetHeadCheckStates(false);\n\t\t}\n\t}, [checkboxStates]); // checkboxStates가 변경될 때마다 useEffect 실행\n\n\tuseEffect(() => {\n\t\tif (list) {\n\t\t\tconst transformedData = list.map((item) => ({\n\t\t\t\tcheck: \"\",\n\t\t\t\tcreatedDate: item.created_date,\n\t\t\t\tuserEmail: item.user_email,\n\t\t\t\tuserId: item.user_id,\n\t\t\t\tuserName: item.user_name,\n\t\t\t\t_cellProps: { class: { scope: \"row\" } },\n\t\t\t}));\n\t\t\tsetItems(transformedData);\n\t\t}\n\t}, [list]);\n\n\tconst setStoreSelectedRoleUserInfo = ({ userId, name, email }) => {\n\t\tdispatch({\n\t\t\ttype: \"user\",\n\t\t\tselectedUserInfo: { userId: userId, name: name, email: email }\n\t\t});\n\t}\n\n\tconst columns = [\n\t\t{ key: \"check\", label: \"선택\", _props: { scope: \"col\" } },\n\t\t{ key: \"user_id\", label: \"사용자ID\", _props: { scope: \"col\" } },\n\t\t{ key: \"user_name\", label: \"성명\", _props: { scope: \"col\" } },\n\t\t{ key: \"user_email\", label: \"이메일 주소\", _props: { scope: \"col\" } },\n\t\t{ key: \"create_dated\", label: \"등록일\", _props: { scope: \"col\" } },\n\t];\n\n\treturn (\n\t\t<>\n\t\t\t<CTable align=\"middle\" responsive bordered={true} hover={true}>\n\t\t\t\t<CTableHead align=\"middle\" color=\"primary\">\n\t\t\t\t\t<CTableRow>\n\t\t\t\t\t\t{columns?.map((column, key) => (\n\t\t\t\t\t\t\t<CTableHeaderCell key={key}>\n\t\t\t\t\t\t\t\t{column.label == \"선택\" ? (\n\t\t\t\t\t\t\t\t\t<CFormCheck\n\t\t\t\t\t\t\t\t\t\tchecked={headCheckStates || false}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tconst isChecked = e.target.checked;\n\t\t\t\t\t\t\t\t\t\t\tsetHeadCheckStates(isChecked);\n\t\t\t\t\t\t\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\t\t\t\t\t\t\titems.forEach((item) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcheckboxStates[item.userId] = true;\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tselectAll();\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\titems.forEach((item) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcheckboxStates[item.userId] = false;\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tunselectAll();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t&nbsp; {column.label}\n\t\t\t\t\t\t\t</CTableHeaderCell>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CTableRow>\n\t\t\t\t</CTableHead>\n\n\t\t\t\t<CTableBody align=\"middle\">\n\t\t\t\t\t{items?.map((item, key) => (\n\t\t\t\t\t\t<CTableRow key={key}>\n\t\t\t\t\t\t\t<CTableDataCell>\n\t\t\t\t\t\t\t\t<CFormCheck\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tid={`gridCheck-${item.userId}`}\n\t\t\t\t\t\t\t\t\tchecked={checkboxStates[item.userId] || false}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tconst isChecked = e.target.checked;\n\t\t\t\t\t\t\t\t\t\thandleCheckboxChange(item.userId, isChecked);\n\t\t\t\t\t\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\t\t\t\t\t\tselectId(item.userId);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tunselectId(item.userId);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CTableDataCell>\n\t\t\t\t\t\t\t<CTableDataCell>\n\t\t\t\t\t\t\t\t<Link to={`/admin/manage-user-role/${item.userId}`} onClick={() => setStoreSelectedRoleUserInfo({ userId: item.userId, name: item.userName, email: item.userEmail })}>\n\t\t\t\t\t\t\t\t\t{item.userId}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</CTableDataCell>\n\t\t\t\t\t\t\t<CTableDataCell>{item.userName}</CTableDataCell>\n\t\t\t\t\t\t\t<CTableDataCell>{item.userEmail}</CTableDataCell>\n\t\t\t\t\t\t\t<CTableDataCell>{item.createdDate}</CTableDataCell>\n\t\t\t\t\t\t</CTableRow>\n\t\t\t\t\t))}\n\t\t\t\t</CTableBody>\n\t\t\t</CTable >\n\t\t</>\n\t);\n};\n\nexport default UserManagementList;\n","import { CCol, CFormInput } from \"@coreui/react\"\n\nconst InputTextTempate = (props) => {\n\tconst { title, value, setOnChange, type, placeholder } = props\n\n\treturn (\n\t\t<CCol className=\"d-flex align-items-center\">\n\t\t\t<CFormInput\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\ttype={type ? type : 'text'}\n\t\t\t\tid={title}\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tsetOnChange(e.target.value);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</CCol >\n\t)\n}\n\nexport default InputTextTempate","import React, { useState, useEffect } from \"react\";\nimport { CCard, CCardBody, CCol, CRow, CCardTitle } from \"@coreui/react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useCookies } from \"react-cookie\";\nimport SelectBox from \"../../../components/selectBox/SelectBox\";\nimport ButtonOutLine from \"../../../components/buttons/ButtonOutline\";\nimport { SetSelectBoxOptions, SetSelectBoxPageOptions } from \"../../../utils/Utilities\";\nimport { useDispatch } from \"react-redux\";\nimport ButtonPrimary from \"../../../components/buttons/ButtonPrimary\";\nimport { deleteUser, getSearchedUserList, getUserList } from \"../../../apis/user/AdminApi\";\nimport UserManagementList from \"./UserManagementList\";\nimport InputTextTempate from \"../../../components/text/InputTextTemplete\";\n\nconst UserManagementMain = () => {\n\tconst dispatch = useDispatch();\n\n\t// 조회 관련 변수\n\tconst [selectedIds, setSelectedIds] = useState([]);\n\tconst [list, setList] = useState();\n\tconst [totalPage, setTotalPage] = useState();\n\tconst [searchedUserName, setSearchedUserName] = useState(\"\");\n\n\t// 패이지네이션\n\tconst [selectBoxReload, setSelectBoxReload] = useState(false);\n\n\t//그리드 셀렉션 초기화\n\tconst [resetCheckbox, setResetCheckbox] = useState(false);\n\n\tuseEffect(() => {\n\t\tinitList(1);\n\t}, []);\n\n\tconst initList = (page) => {\n\t\ttry {\n\t\t\treturn getUserList({ page: page })\n\t\t\t\t.then((data) => {\n\t\t\t\t\tsetList(data.users)\n\t\t\t\t\tsetTotalPage(data.pages)\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t}\n\t}\n\n\t// 사용자 리스트 조회\n\tconst getList = ({ isRefresh, page }) => {\n\t\ttry {\n\t\t\treturn getUserList({\n\t\t\t\tpage: isRefresh ? 1 : page\n\t\t\t}).then((data) => {\n\t\t\t\tsetList(data.users)\n\t\t\t\tif (isRefresh) {\n\t\t\t\t\tsetResetCheckbox(!resetCheckbox)\n\t\t\t\t\tsetSelectBoxReload(!selectBoxReload)\n\t\t\t\t\tsetTotalPage(data.pages)\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t}\n\t};\n\n\t// 사용자 리스트 검색 조회\n\tconst getSearchedList = ({ isRefresh, page }) => {\n\t\ttry {\n\t\t\treturn getSearchedUserList({\n\t\t\t\tuserName: searchedUserName,\n\t\t\t\tpage: isRefresh ? 1 : page\n\t\t\t}).then((data) => {\n\t\t\t\tsetList(data.users)\n\t\t\t\tif (isRefresh) {\n\t\t\t\t\tsetSelectBoxReload(!selectBoxReload)\n\t\t\t\t\tsetTotalPage(data.pages)\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t}\n\t};\n\n\t// 초기화\n\tconst reloadData = async () => {\n\t\ttry {\n\t\t\tsetResetCheckbox(!resetCheckbox)\n\t\t\tgetSearchedList({ isRefresh: true, page: 1 });\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error fetching data:\", error);\n\t\t}\n\t};\n\n\tconst selectId = (id) => {\n\t\tsetSelectedIds([...selectedIds, id]);\n\t};\n\n\tconst unselectId = (id) => {\n\t\tsetSelectedIds(selectedIds.filter((number) => number !== id));\n\t};\n\n\tconst selectAll = () => {\n\t\tconst allIds = list.map((item) => item.number);\n\t\tsetSelectedIds([...selectedIds, ...allIds]);\n\t};\n\n\tconst unselectAll = () => {\n\t\tsetSelectedIds([]);\n\t};\n\n\t//사용자 삭제 요청\n\tconst onClickDelete = async () => {\n\t\tif (selectedIds.length > 0) {\n\t\t\tdispatch({\n\t\t\t\ttype: \"modal\",\n\t\t\t\tshowConfirmModal: {\n\t\t\t\t\tisShow: true,\n\t\t\t\t\ttitle: \"사용자 삭제 확인\",\n\t\t\t\t\tmsg: `${selectedIds.length}명의 사용자를 삭제하시겠습니까?`,\n\t\t\t\t\tonConfirm: () => {\n\t\t\t\t\t\tdeleteUser({ userId: selectedIds }).then((response) => {\n\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\tdispatch({ type: \"modal\", showAlertModal: { isShow: true, title: \"삭제 완료\", msg: \"사용자를 삭제하였습니다.\" } });\n\t\t\t\t\t\t\t\treloadData()\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdispatch({ type: \"modal\", showAlertModal: { isShow: true, title: \"⚠️ 알림\", msg: \"삭제에 실패하였습니다.\" } });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: \"modal\",\n\t\t\t\tshowAlertModal: {\n\t\t\t\t\tisShow: true,\n\t\t\t\t\ttitle: \"사용자 삭제 확인\",\n\t\t\t\t\tmsg: \"삭제할 사용자를 선택해 주세요\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<CRow className=\"d-flex justify-content-center align-item-center\">\n\t\t\t\t<CCard className=\"d-flex mb-3\">\n\t\t\t\t\t<CCardBody>\n\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t<CCardTitle style={{ fontWeight: \"bold\" }}>사용자 관리</CCardTitle>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<CRow className=\"justify-content-end mb-4\" xs={{ cols: 'auto' }}>\n\t\t\t\t\t\t\t<InputTextTempate title=\"Searched User Name\"\n\t\t\t\t\t\t\t\tsetOnChange={setSearchedUserName}\n\t\t\t\t\t\t\t\tplaceholder=\"성명\" />\n\t\t\t\t\t\t\t<CCol>\n\t\t\t\t\t\t\t\t<ButtonPrimary\n\t\t\t\t\t\t\t\t\ttext=\"검색\"\n\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\tif (searchedUserName.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\tgetSearchedList({ isRefresh: false, page: 1 })\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tgetList({ isRefresh: false, page: 1 });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t</CRow>\n\t\t\t\t\t\t<CRow>\n\t\t\t\t\t\t\t<CCol className=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t<ButtonOutLine text=\"삭제\" onClick={onClickDelete} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"d-flex\">\n\t\t\t\t\t\t\t\t\t<SelectBox\n\t\t\t\t\t\t\t\t\t\toptions={SetSelectBoxPageOptions(totalPage)}\n\t\t\t\t\t\t\t\t\t\treload={selectBoxReload}\n\t\t\t\t\t\t\t\t\t\tcallBack={(pageValue) => {\n\t\t\t\t\t\t\t\t\t\t\tif (searchedUserName.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tgetSearchedList({ isRefresh: false, page: pageValue })\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tgetList({ isRefresh: false, page: pageValue });\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</CCol>\n\t\t\t\t\t\t</CRow>\n\t\t\t\t\t</CCardBody>\n\t\t\t\t\t<UserManagementList\n\t\t\t\t\t\tlist={list}\n\t\t\t\t\t\tselectId={selectId}\n\t\t\t\t\t\tunselectId={unselectId}\n\t\t\t\t\t\tselectAll={selectAll}\n\t\t\t\t\t\tunselectAll={unselectAll}\n\t\t\t\t\t\tresetCheckbox={resetCheckbox}\n\t\t\t\t\t/>\n\t\t\t\t</CCard>\n\t\t\t</CRow>\n\t\t</>\n\t);\n};\n\nexport default UserManagementMain;\n"],"names":["_ref","list","selectId","unselectId","selectAll","unselectAll","resetCheckbox","dispatch","useDispatch","items","setItems","useNavigate","useState","headCheckStates","setHeadCheckStates","checkboxStates","setCheckboxStates","selectedItem","setSelectedItem","useEffect","forEach","item","userId","Object","keys","length","allChecked","values","every","value","transformedData","map","check","createdDate","created_date","userEmail","user_email","user_id","userName","user_name","_cellProps","class","scope","columns","key","label","_props","_jsx","_Fragment","children","_jsxs","CTable","align","responsive","bordered","hover","CTableHead","color","CTableRow","column","CTableHeaderCell","CFormCheck","checked","onChange","e","isChecked","target","CTableBody","CTableDataCell","type","id","handleCheckboxChange","prevState","Link","to","onClick","_ref2","name","email","selectedUserInfo","setStoreSelectedRoleUserInfo","props","title","setOnChange","placeholder","CCol","className","CFormInput","UserManagementMain","selectedIds","setSelectedIds","setList","totalPage","setTotalPage","searchedUserName","setSearchedUserName","selectBoxReload","setSelectBoxReload","setResetCheckbox","initList","page","getUserList","then","data","users","pages","catch","error","console","log","getList","isRefresh","getSearchedList","getSearchedUserList","CRow","CCard","CCardBody","CCardTitle","style","fontWeight","xs","cols","InputTextTempate","ButtonPrimary","text","async","ButtonOutLine","showConfirmModal","isShow","msg","onConfirm","deleteUser","response","showAlertModal","reloadData","SelectBox","options","SetSelectBoxPageOptions","reload","callBack","pageValue","UserManagementList","filter","number","allIds"],"sourceRoot":""}